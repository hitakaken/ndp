package com.novbank.ndp.kernel.vocabulary;

import com.novbank.ndp.kernel.rdfsupport.RDFProperty;
import com.novbank.ndp.kernel.rdfsupport.RDFResource;
import com.novbank.ndp.kernel.rdfsupport.RDFVocabulary;

/**
 * Created by CaoKe on 2015/5/12.
 */
public class JCR extends RDFVocabulary{
    public static final String NAMESPACE = "http://www.jcp.org/jcr/1.0";
    public static final String PREFIX = "jcr";
    public static final JCR INSTANCE = new JCR();
    /**
     * {@link javax.jcr.Property} 
     */    
    public final RDFProperty primaryType;
    public final RDFProperty mixinTypes;
    public final RDFProperty content;
    public final RDFProperty data;
    public final RDFProperty protocol;
    public final RDFProperty host;
    public final RDFProperty port;
    public final RDFProperty repository;
    public final RDFProperty workspace;
    public final RDFProperty path;
    public final RDFProperty id;
    public final RDFProperty uuid;
    public final RDFProperty title;
    public final RDFProperty description;
    public final RDFProperty created;
    public final RDFProperty createdBy;
    public final RDFProperty lastModified;
    public final RDFProperty lastModifiedBy;
    public final RDFProperty language;
    public final RDFProperty mimeType;
    public final RDFProperty encoding;
    public final RDFProperty nodeTypeName;
    public final RDFProperty supertypes;
    public final RDFProperty isAbstract;
    public final RDFProperty isMixin;
    public final RDFProperty hasOrderableChildNodes;
    public final RDFProperty primaryItemName;
    public final RDFProperty name;
    public final RDFProperty autoCreated;
    public final RDFProperty mandatory;
    public final RDFProperty _protected;
    public final RDFProperty onParentVersion;
    public final RDFProperty requiredType;
    public final RDFProperty valueConstraints;
    public final RDFProperty defaultValues;
    public final RDFProperty multiple;
    public final RDFProperty requiredPrimaryTypes;
    public final RDFProperty defaultPrimaryType;
    public final RDFProperty sameNameSiblings;
    public final RDFProperty lockOwner;
    public final RDFProperty lockIsDeep;
    public final RDFProperty lifecyclePolicy;
    public final RDFProperty currentLifecycleState;
    public final RDFProperty isCheckedOut;
    public final RDFProperty frozenPrimaryType;
    public final RDFProperty frozenMixinTypes;
    public final RDFProperty frozenUuid;
    public final RDFProperty versionHistory;
    public final RDFProperty baseVersion;
    public final RDFProperty predecessors;
    public final RDFProperty mergeFailed;
    public final RDFProperty activity;
    public final RDFProperty configuration;
    public final RDFProperty versionableUuid;
    public final RDFProperty copiedFrom;
    public final RDFProperty successors;
    public final RDFProperty childVersionHistory;
    public final RDFProperty root;
    public final RDFProperty statement;    
    /**
     * {@link javax.jcr.Node}
     */
    //public final RDFProperty content;
    public final RDFProperty propertyDefinition;
    public final RDFProperty childNodeDefinition;
    public final RDFProperty rootVersion;
    public final RDFProperty versionLabels;
    public final RDFProperty frozenNode;
    /**
     * {@link javax.jcr.Workspace}
     */
    public final RDFResource system;
    public final RDFResource nodeTypes;
    public final RDFResource versionStorage;
    public final RDFResource activities;
    public final RDFResource configurations;
    public final RDFResource unfiled;
    public final RDFResource xmltext;
    public final RDFResource xmlcharacters;
    
    public JCR() {
        super(NAMESPACE,PREFIX);
        primaryType = addProperty("primaryType");
        mixinTypes = addProperty("mixinTypes");
        content = addProperty("content");
        data = addProperty("data");
        protocol = addProperty("protocol");
        host = addProperty("host");
        port = addProperty("port");
        repository = addProperty("repository");
        workspace = addProperty("workspace");
        path = addProperty("path");
        id = addProperty("id");
        uuid = addProperty("uuid");
        title = addProperty("title");
        description = addProperty("description");
        created = addProperty("created");
        createdBy = addProperty("createdBy");
        lastModified = addProperty("lastModified");
        lastModifiedBy = addProperty("lastModifiedBy");
        language = addProperty("language");
        mimeType = addProperty("mimeType");
        encoding = addProperty("encoding");
        nodeTypeName = addProperty("nodeTypeName");
        supertypes = addProperty("supertypes");
        isAbstract = addProperty("isAbstract");
        isMixin = addProperty("isMixin");
        hasOrderableChildNodes = addProperty("hasOrderableChildNodes");
        primaryItemName = addProperty("primaryItemName");
        name = addProperty("name");
        autoCreated = addProperty("autoCreated");
        mandatory = addProperty("mandatory");
        _protected = addProperty("protected");
        onParentVersion = addProperty("onParentVersion");
        requiredType = addProperty("requiredType");
        valueConstraints = addProperty("valueConstraints");
        defaultValues = addProperty("defaultValues");
        multiple = addProperty("multiple");
        requiredPrimaryTypes = addProperty("requiredPrimaryTypes");
        defaultPrimaryType = addProperty("defaultPrimaryType");
        sameNameSiblings = addProperty("sameNameSiblings");
        lockOwner = addProperty("lockOwner");
        lockIsDeep = addProperty("lockIsDeep");
        lifecyclePolicy = addProperty("lifecyclePolicy");
        currentLifecycleState = addProperty("currentLifecycleState");
        isCheckedOut = addProperty("isCheckedOut");
        frozenPrimaryType = addProperty("frozenPrimaryType");
        frozenMixinTypes = addProperty("frozenMixinTypes");
        frozenUuid = addProperty("frozenUuid");
        versionHistory = addProperty("versionHistory");
        baseVersion = addProperty("baseVersion");
        predecessors = addProperty("predecessors");
        mergeFailed = addProperty("mergeFailed");
        activity = addProperty("activity");
        configuration = addProperty("configuration");
        versionableUuid = addProperty("versionableUuid");
        copiedFrom = addProperty("copiedFrom");
        successors = addProperty("successors");
        childVersionHistory = addProperty("childVersionHistory");
        root = addProperty("root");
        statement = addProperty("statement");
        //content = addProperty("content");
        propertyDefinition = addProperty("propertyDefinition");
        childNodeDefinition = addProperty("childNodeDefinition");
        rootVersion = addProperty("rootVersion");
        versionLabels = addProperty("versionLabels");
        frozenNode = addProperty("frozenNode");

        system = addResource("system");
        nodeTypes = addResource("nodeTypes");
        versionStorage = addResource("versionStorage");
        activities = addResource("activities");
        configurations = addResource("configurations");
        unfiled = addResource("unfiled");
        xmltext = addResource("xmltext");
        xmlcharacters = addResource("xmlcharacters");
        lock();
    }

    public static final RDFProperty PRIMARY_TYPE = INSTANCE.primaryType;
    public static final RDFProperty MIXIN_TYPES = INSTANCE.mixinTypes;
    public static final RDFProperty CONTENT = INSTANCE.content;
    public static final RDFProperty DATA = INSTANCE.data;
    public static final RDFProperty PROTOCOL = INSTANCE.protocol;
    public static final RDFProperty HOST = INSTANCE.host;
    public static final RDFProperty PORT = INSTANCE.port;
    public static final RDFProperty REPOSITORY = INSTANCE.repository;
    public static final RDFProperty WORKSPACE = INSTANCE.workspace;
    public static final RDFProperty PATH = INSTANCE.path;
    public static final RDFProperty ID = INSTANCE.id;
    public static final RDFProperty UUID = INSTANCE.uuid;
    public static final RDFProperty TITLE = INSTANCE.title;
    public static final RDFProperty DESCRIPTION = INSTANCE.description;
    public static final RDFProperty CREATED = INSTANCE.created;
    public static final RDFProperty CREATED_BY = INSTANCE.createdBy;
    public static final RDFProperty LAST_MODIFIED = INSTANCE.lastModified;
    public static final RDFProperty LAST_MODIFIED_BY = INSTANCE.lastModifiedBy;
    public static final RDFProperty LANGUAGE = INSTANCE.language;
    public static final RDFProperty MIME_TYPE = INSTANCE.mimeType;
    public static final RDFProperty ENCODING = INSTANCE.encoding;
    public static final RDFProperty NODE_TYPE_NAME = INSTANCE.nodeTypeName;
    public static final RDFProperty SUPERTYPES = INSTANCE.supertypes;
    public static final RDFProperty IS_ABSTRACT = INSTANCE.isAbstract;
    public static final RDFProperty IS_MIXIN = INSTANCE.isMixin;
    public static final RDFProperty HAS_ORDERABLE_CHILD_NODES = INSTANCE.hasOrderableChildNodes;
    public static final RDFProperty PRIMARY_ITEM_NAME = INSTANCE.primaryItemName;
    public static final RDFProperty NAME = INSTANCE.name;
    public static final RDFProperty AUTO_CREATED = INSTANCE.autoCreated;
    public static final RDFProperty MANDATORY = INSTANCE.mandatory;
    public static final RDFProperty PROTECTED = INSTANCE._protected;
    public static final RDFProperty ON_PARENT_VERSION = INSTANCE.onParentVersion;
    public static final RDFProperty REQUIRED_TYPE = INSTANCE.requiredType;
    public static final RDFProperty VALUE_CONSTRAINTS = INSTANCE.valueConstraints;
    public static final RDFProperty DEFAULT_VALUES = INSTANCE.defaultValues;
    public static final RDFProperty MULTIPLE = INSTANCE.multiple;
    public static final RDFProperty REQUIRED_PRIMARY_TYPES = INSTANCE.requiredPrimaryTypes;
    public static final RDFProperty DEFAULT_PRIMARY_TYPE = INSTANCE.defaultPrimaryType;
    public static final RDFProperty SAME_NAME_SIBLINGS = INSTANCE.sameNameSiblings;
    public static final RDFProperty LOCK_OWNER = INSTANCE.lockOwner;
    public static final RDFProperty LOCK_IS_DEEP = INSTANCE.lockIsDeep;
    public static final RDFProperty LIFECYCLE_POLICY = INSTANCE.lifecyclePolicy;
    public static final RDFProperty CURRENT_LIFECYCLE_STATE = INSTANCE.currentLifecycleState;
    public static final RDFProperty IS_CHECKED_OUT = INSTANCE.isCheckedOut;
    public static final RDFProperty FROZEN_PRIMARY_TYPE = INSTANCE.frozenPrimaryType;
    public static final RDFProperty FROZEN_MIXIN_TYPES = INSTANCE.frozenMixinTypes;
    public static final RDFProperty FROZEN_UUID = INSTANCE.frozenUuid;
    public static final RDFProperty VERSION_HISTORY = INSTANCE.versionHistory;
    public static final RDFProperty BASE_VERSION = INSTANCE.baseVersion;
    public static final RDFProperty PREDECESSORS = INSTANCE.predecessors;
    public static final RDFProperty MERGE_FAILED = INSTANCE.mergeFailed;
    public static final RDFProperty ACTIVITY = INSTANCE.activity;
    public static final RDFProperty CONFIGURATION = INSTANCE.configuration;
    public static final RDFProperty VERSIONABLE_UUID = INSTANCE.versionableUuid;
    public static final RDFProperty COPIED_FROM = INSTANCE.copiedFrom;
    public static final RDFProperty SUCCESSORS = INSTANCE.successors;
    public static final RDFProperty CHILD_VERSION_HISTORY = INSTANCE.childVersionHistory;
    public static final RDFProperty ROOT = INSTANCE.root;
    public static final RDFProperty STATEMENT = INSTANCE.statement;
    //public static final RDFProperty CONTENT = INSTANCE.content;
    public static final RDFProperty PROPERTY_DEFINITION = INSTANCE.propertyDefinition;
    public static final RDFProperty CHILD_NODE_DEFINITION = INSTANCE.childNodeDefinition;
    public static final RDFProperty ROOT_VERSION = INSTANCE.rootVersion;
    public static final RDFProperty VERSION_LABELS = INSTANCE.versionLabels;
    public static final RDFProperty FROZEN_NODE = INSTANCE.frozenNode;

    public static final RDFResource SYSTEM = INSTANCE.system;
    public static final RDFResource NODE_TYPES = INSTANCE.nodeTypes;
    public static final RDFResource VERSION_STORAGE = INSTANCE.versionStorage;
    public static final RDFResource ACTIVITIES = INSTANCE.activities;
    public static final RDFResource CONFIGURATIONS = INSTANCE.configurations;
    public static final RDFResource UNFILED = INSTANCE.unfiled;
    public static final RDFResource XML_TEXT = INSTANCE.xmltext;
    public static final RDFResource XML_CHARACTERS = INSTANCE.xmlcharacters;
}
